
LCD_16x2_Testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d30  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000795  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059d  00000000  00000000  00001859  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000409  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c3  00000000  00000000  000022d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h> //Atmega32a library.
#include "MyLCD.h"

int main(void)
{
    LCD_init();
  82:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_init>
	
    while (1) 
    {
		LCD_write_str("I LOVE YOU FOFA");
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_write_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	83 ed       	ldi	r24, 0xD3	; 211
  92:	90 e3       	ldi	r25, 0x30	; 48
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x12>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1c>
  9e:	00 00       	nop
		_delay_ms(1000);
		LCD_clear();
  a0:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_clear>
		LCD_write_str("YOU LOVE ME? :(");
  a4:	80 e7       	ldi	r24, 0x70	; 112
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_write_str>
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	83 ed       	ldi	r24, 0xD3	; 211
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x30>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3a>
  bc:	00 00       	nop
		_delay_ms(1000);
		LCD_clear();
  be:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_clear>
  c2:	e1 cf       	rjmp	.-62     	; 0x86 <main+0x4>

000000c4 <LCD_cmd>:

									//4-bit Mode

void LCD_cmd(char cmd)
{
	LCD_Command_Port &= ~(1<<RS); //RS to LOW to receive command.
  c4:	c1 98       	cbi	0x18, 1	; 24
	//First half of the command.
	LCD_Data_Port &=0x0F;
  c6:	9b b3       	in	r25, 0x1b	; 27
  c8:	9f 70       	andi	r25, 0x0F	; 15
  ca:	9b bb       	out	0x1b, r25	; 27
	LCD_Data_Port |= (0xF0&cmd);
  cc:	9b b3       	in	r25, 0x1b	; 27
  ce:	28 2f       	mov	r18, r24
  d0:	20 7f       	andi	r18, 0xF0	; 240
  d2:	92 2b       	or	r25, r18
  d4:	9b bb       	out	0x1b, r25	; 27
	LCD_Command_Port |=  (1<<E);  //
  d6:	c3 9a       	sbi	0x18, 3	; 24
  d8:	ef e3       	ldi	r30, 0x3F	; 63
  da:	fc e9       	ldi	r31, 0x9C	; 156
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_cmd+0x18>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_cmd+0x1e>
  e2:	00 00       	nop
	_delay_ms(10);				  //Giving the pulse to receive command.
	LCD_Command_Port &= ~(1<<E);  //
  e4:	c3 98       	cbi	0x18, 3	; 24
  e6:	ef e9       	ldi	r30, 0x9F	; 159
  e8:	ff e0       	ldi	r31, 0x0F	; 15
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_cmd+0x26>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_cmd+0x2c>
  f0:	00 00       	nop
	_delay_ms(1);
	//second half of the command.
	LCD_Data_Port &=0x0F;
  f2:	9b b3       	in	r25, 0x1b	; 27
  f4:	9f 70       	andi	r25, 0x0F	; 15
  f6:	9b bb       	out	0x1b, r25	; 27
	LCD_Data_Port |= (cmd<<4);
  f8:	2b b3       	in	r18, 0x1b	; 27
  fa:	f0 e1       	ldi	r31, 0x10	; 16
  fc:	8f 9f       	mul	r24, r31
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	82 2b       	or	r24, r18
 104:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |=  (1<<E);  //
 106:	c3 9a       	sbi	0x18, 3	; 24
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	9c e9       	ldi	r25, 0x9C	; 156
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_cmd+0x48>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_cmd+0x4e>
 112:	00 00       	nop
	_delay_ms(10);				  //Giving the pulse to receive command.
	LCD_Command_Port &= ~(1<<E);  //
 114:	c3 98       	cbi	0x18, 3	; 24
 116:	08 95       	ret

00000118 <LCD_cmd_4bits>:
}
void LCD_cmd_4bits(char cmd)
{
	LCD_Command_Port &= ~(1<<RS); //RS to LOW to receive command.
 118:	c1 98       	cbi	0x18, 1	; 24
	LCD_Data_Port = cmd;
 11a:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |=  (1<<E);  //
 11c:	c3 9a       	sbi	0x18, 3	; 24
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9c e9       	ldi	r25, 0x9C	; 156
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_cmd_4bits+0xa>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_cmd_4bits+0x10>
 128:	00 00       	nop
	_delay_ms(10);				  //Giving the pulse to receive command.
	LCD_Command_Port &= ~(1<<E);  //
 12a:	c3 98       	cbi	0x18, 3	; 24
 12c:	08 95       	ret

0000012e <LCD_init>:
}
void LCD_init()
{
	LCD_Data_Dir |= ((1<<4)|(1<<5)|(1<<6)|(1<<7)); //DDRx for D4->D7 (put pins connected)
 12e:	8a b3       	in	r24, 0x1a	; 26
 130:	80 6f       	ori	r24, 0xF0	; 240
 132:	8a bb       	out	0x1a, r24	; 26
	LCD_Command_Dir |= ((1<<RS)|(1<<E)|(1<<RW));   //DDRx for RS,E,RW
 134:	87 b3       	in	r24, 0x17	; 23
 136:	8e 60       	ori	r24, 0x0E	; 14
 138:	87 bb       	out	0x17, r24	; 23
	LCD_Command_Port &= ~(1<<RW);				   //RW to LOW to write on LCD.
 13a:	c2 98       	cbi	0x18, 2	; 24
	LCD_cmd_4bits(0x28);                           //4-bit mode.
 13c:	88 e2       	ldi	r24, 0x28	; 40
 13e:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_cmd_4bits>
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9c e9       	ldi	r25, 0x9C	; 156
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_init+0x18>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_init+0x1e>
 14c:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0x01);								   //Clears LCD Screen.
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_cmd>
 154:	8f e3       	ldi	r24, 0x3F	; 63
 156:	9c e9       	ldi	r25, 0x9C	; 156
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_init+0x2a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_init+0x30>
 15e:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0x80);								   //Put the cursor in the first line.
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_cmd>
 166:	8f e3       	ldi	r24, 0x3F	; 63
 168:	9c e9       	ldi	r25, 0x9C	; 156
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_init+0x3c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_init+0x42>
 170:	00 00       	nop
	_delay_ms(10);
	LCD_cmd(0x0C);                                 //Display ON, cursor OFF.
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_cmd>
 178:	8f e3       	ldi	r24, 0x3F	; 63
 17a:	9c e9       	ldi	r25, 0x9C	; 156
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_init+0x4e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_init+0x54>
 182:	00 00       	nop
 184:	08 95       	ret

00000186 <LCD_clear>:
 186:	8f e3       	ldi	r24, 0x3F	; 63
 188:	9c e9       	ldi	r25, 0x9C	; 156
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_clear+0x4>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_clear+0xa>
 190:	00 00       	nop
	_delay_ms(10);
}
void LCD_clear()
{
	_delay_ms(10);
	LCD_cmd(0x01); //Clears LCD Screen.
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_cmd>
 198:	8f e3       	ldi	r24, 0x3F	; 63
 19a:	9c e9       	ldi	r25, 0x9C	; 156
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_clear+0x16>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_clear+0x1c>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <LCD_write_char>:
	_delay_ms(10);
}
void LCD_write_char(char data)
{
	LCD_Command_Port |= (1<<RS); //RS to HIGH to receive data.
 1a6:	c1 9a       	sbi	0x18, 1	; 24
	//First half of the command.
	LCD_Data_Port &=0x0F;
 1a8:	9b b3       	in	r25, 0x1b	; 27
 1aa:	9f 70       	andi	r25, 0x0F	; 15
 1ac:	9b bb       	out	0x1b, r25	; 27
	LCD_Data_Port |= (0xF0&data);
 1ae:	9b b3       	in	r25, 0x1b	; 27
 1b0:	28 2f       	mov	r18, r24
 1b2:	20 7f       	andi	r18, 0xF0	; 240
 1b4:	92 2b       	or	r25, r18
 1b6:	9b bb       	out	0x1b, r25	; 27
	LCD_Command_Port |=  (1<<E);  //
 1b8:	c3 9a       	sbi	0x18, 3	; 24
 1ba:	ef e3       	ldi	r30, 0x3F	; 63
 1bc:	fc e9       	ldi	r31, 0x9C	; 156
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_write_char+0x18>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_write_char+0x1e>
 1c4:	00 00       	nop
	_delay_ms(10);				  //Giving the pulse to receive data.
	LCD_Command_Port &= ~(1<<E);  //
 1c6:	c3 98       	cbi	0x18, 3	; 24
 1c8:	ef e9       	ldi	r30, 0x9F	; 159
 1ca:	ff e0       	ldi	r31, 0x0F	; 15
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCD_write_char+0x26>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <LCD_write_char+0x2c>
 1d2:	00 00       	nop
	_delay_ms(1);//second half of the command.
	LCD_Data_Port &=0x0F;
 1d4:	9b b3       	in	r25, 0x1b	; 27
 1d6:	9f 70       	andi	r25, 0x0F	; 15
 1d8:	9b bb       	out	0x1b, r25	; 27
	LCD_Data_Port |= (data<<4);
 1da:	2b b3       	in	r18, 0x1b	; 27
 1dc:	f0 e1       	ldi	r31, 0x10	; 16
 1de:	8f 9f       	mul	r24, r31
 1e0:	c0 01       	movw	r24, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	82 2b       	or	r24, r18
 1e6:	8b bb       	out	0x1b, r24	; 27
	LCD_Command_Port |=  (1<<E);  //
 1e8:	c3 9a       	sbi	0x18, 3	; 24
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	9c e9       	ldi	r25, 0x9C	; 156
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_write_char+0x48>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_write_char+0x4e>
 1f4:	00 00       	nop
	_delay_ms(10);				  //Giving the pulse to receive data.
	LCD_Command_Port &= ~(1<<E);  //
 1f6:	c3 98       	cbi	0x18, 3	; 24
 1f8:	08 95       	ret

000001fa <LCD_write_str>:
}
void LCD_write_str(char* str)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
	for(int i=0;str[i] !='\0';i++)
 200:	88 81       	ld	r24, Y
 202:	88 23       	and	r24, r24
 204:	31 f0       	breq	.+12     	; 0x212 <LCD_write_str+0x18>
 206:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_write_char(str[i]);
 208:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_write_char>
	_delay_ms(10);				  //Giving the pulse to receive data.
	LCD_Command_Port &= ~(1<<E);  //
}
void LCD_write_str(char* str)
{
	for(int i=0;str[i] !='\0';i++)
 20c:	89 91       	ld	r24, Y+
 20e:	81 11       	cpse	r24, r1
 210:	fb cf       	rjmp	.-10     	; 0x208 <LCD_write_str+0xe>
	{
		LCD_write_char(str[i]);
	}
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
